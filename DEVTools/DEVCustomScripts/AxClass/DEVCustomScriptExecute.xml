<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVCustomScriptExecute</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DEVCustomScriptExecute extends RunBase
{
    public DEVCustomScriptRecId scriptRecId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        scriptRecId
    #endmacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "Execute custom X++ script";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkScript</Name>
				<Source><![CDATA[
    protected void checkScript(DEVCustomScriptTable _scriptTable)
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleScript</Name>
				<Source><![CDATA[
    protected void handleScript(DEVCustomScriptTable _scriptTable)
    {
        using (DEVCustomScriptFile file = DEVCustomScriptFile::newFromFileId(_scriptTable.packageTable().ServerFileId))
        {
            file.executeScript(_scriptTable.ClassName);
        }
        Info("Script execution completed");
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        DEVCustomScriptTable   scriptTable = DEVCustomScriptTable::findRecId(scriptRecId);
        if (! scriptTable)
        {
            throw error("Script not found");
        }

        this.checkScript(scriptTable);
        this.handleScript(scriptTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DEVCustomScriptExecute construct()
    {
        return new DEVCustomScriptExecute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DEVisUserInRole</Name>
				<Source><![CDATA[
    public boolean DEVisUserInRole(Description  _roleName)
    {
        boolean                 res;
        SecurityUserRole        securityUserRole;
        SecurityRole            securityRole;
        ;
        select firstonly RecId from securityUserRole
            where  securityUserRole.User    == curUserId()
            join RecId from securityRole
                where  securityRole.RecId == securityUserRole.SecurityRole
                    && (   securityRole.AotName == _roleName
                    )    ;
        if (securityUserRole.RecId)
        {
            res = true;
        }
    
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        DEVCustomScriptExecute action = DEVCustomScriptExecute::construct();

        if (! action.DEVisUserInRole(roleStr(DEVCustomScriptMaintain)))
        {
          //  throw error(strFmt("User %1 should be included to %2 role",
          //          curUserId(), roleStr(DEVCustomScriptMaintain)));
        }

        action.scriptRecId = _args.record().RecId;
        action.saveLast();

        if (action.prompt())
        {
            action.runOperation();
        }
    }

    /*
    --SEARCH ALL Numeric fields
 SET NOCOUNT ON
 --drop table #Results
 CREATE TABLE #Results (ColumnName nvarchar(370), ColumnValue nvarchar(3630))
 DECLARE @TableName nvarchar(256), @ColumnName nvarchar(128), @SearchStr2 nvarchar(110)
 DECLARE @Total_Rows bigint

 DECLARE table_cursor CURSOR  FOR
 SELECT --QUOTENAME(TABLE_SCHEMA) + '.' +
        TABLE_NAME
        FROM     INFORMATION_SCHEMA.TABLES
        WHERE         TABLE_TYPE = 'BASE TABLE'
            and TABLE_SCHEMA = 'DBO'
            AND    OBJECTPROPERTY(
                    OBJECT_ID(
                        QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME)
                         ), 'IsMSShipped'
                           ) = 0 --and TABLE_NAME = 'InventTrans'
                           ORDER BY TABLE_NAME
OPEN table_cursor
FETCH NEXT FROM table_cursor into @TableName
WHILE @@FETCH_STATUS = 0
BEGIN
 

    SELECT @Total_Rows	= SUM(st.row_count)
    FROM
       sys.dm_db_partition_stats st
    WHERE
        object_name(object_id) = @TableName AND (index_id < 2)
    IF @Total_Rows > 5
    BEGIN
        print @TableName
        print @Total_Rows
        --RAISERROR( N'',0,1) WITH NOWAIT


        DECLARE columns_cursor CURSOR  FOR
        SELECT COLUMN_NAME
            FROM     INFORMATION_SCHEMA.COLUMNS
            WHERE         TABLE_SCHEMA    = 'DBO'
                AND    TABLE_NAME    = @TableName
                AND    DATA_TYPE ='numeric'
                AND    COLUMN_NAME <> 'DATAAREAID'
        OPEN columns_cursor
        FETCH NEXT FROM columns_cursor into @ColumnName
        WHILE @@FETCH_STATUS = 0
        BEGIN
          --  print @ColumnName
            INSERT INTO #Results
            EXEC
            (
                'SELECT TOP 100 ''' + @TableName + '.' + @ColumnName + ''', LEFT(' + @ColumnName + ', 3630) FROM ' + @TableName + ' (NOLOCK) ' +
               -- ' WHERE ' + @ColumnName + ' = ' + @SearchStr2
                ' WHERE Round(' + @ColumnName + ', 2) <> ' + @ColumnName
            )
            FETCH NEXT FROM columns_cursor into @ColumnName
        END
        CLOSE columns_cursor
        DEALLOCATE columns_cursor


    END
    FETCH NEXT FROM table_cursor into @TableName
END
CLOSE table_cursor
DEALLOCATE table_cursor
SELECT ColumnName, ColumnValue FROM #Results
 
DROP TABLE #Results



--SEARCH ALL VALUES
SQL FOR SCAN ALL TEXT FIELDS IN DATABASE

 SET NOCOUNT ON
 CREATE TABLE #Results (ColumnName nvarchar(370), ColumnValue nvarchar(3630))
 DECLARE @TableName nvarchar(256), @ColumnName nvarchar(128), @SearchStr2 nvarchar(110)
 DECLARE @Total_Rows bigint
 DECLARE @SearchStr nvarchar(100)
 SET @SearchStr = N'DEAF-017824'
 SET @SearchStr2 = QUOTENAME('' + @SearchStr + '','''')

 DECLARE table_cursor CURSOR  FOR
 SELECT --QUOTENAME(TABLE_SCHEMA) + '.' +
        TABLE_NAME
        FROM     INFORMATION_SCHEMA.TABLES
        WHERE         TABLE_TYPE = 'BASE TABLE'
            and TABLE_SCHEMA = 'DBO'
            AND    OBJECTPROPERTY(
                    OBJECT_ID(
                        QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME)
                         ), 'IsMSShipped'
                           ) = 0 --and TABLE_NAME = 'PROJTRANSPOSTING'
                           ORDER BY TABLE_NAME
OPEN table_cursor
FETCH NEXT FROM table_cursor into @TableName
WHILE @@FETCH_STATUS = 0
BEGIN
 

    SELECT @Total_Rows	= SUM(st.row_count)
    FROM
       sys.dm_db_partition_stats st
    WHERE
        object_name(object_id) = @TableName AND (index_id < 2)
    IF @Total_Rows > 0
    BEGIN
        --print @TableName
        --print @Total_Rows
        --RAISERROR( N'',0,1) WITH NOWAIT


        DECLARE columns_cursor CURSOR  FOR
        SELECT COLUMN_NAME
            FROM     INFORMATION_SCHEMA.COLUMNS
            WHERE         TABLE_SCHEMA    = 'DBO'
                AND    TABLE_NAME    = @TableName
                AND    DATA_TYPE ='nvarchar'
                AND    COLUMN_NAME <> 'DATAAREAID'
        OPEN columns_cursor
        FETCH NEXT FROM columns_cursor into @ColumnName
        WHILE @@FETCH_STATUS = 0
        BEGIN
            --print @ColumnName
            INSERT INTO #Results
            EXEC
            (
                'SELECT TOP 1 ''' + @TableName + '.' + @ColumnName + ''', LEFT(' + @ColumnName + ', 3630) FROM ' + @TableName + ' (NOLOCK) ' +
                ' WHERE ' + @ColumnName + ' = ' + @SearchStr2
            )
            FETCH NEXT FROM columns_cursor into @ColumnName
        END
        CLOSE columns_cursor
        DEALLOCATE columns_cursor


    END
    FETCH NEXT FROM table_cursor into @TableName
END
CLOSE table_cursor
DEALLOCATE table_cursor
SELECT ColumnName, ColumnValue FROM #Results
 
DROP TABLE #Results

    */

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>