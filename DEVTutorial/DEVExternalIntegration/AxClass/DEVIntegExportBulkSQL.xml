<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVIntegExportBulkSQL</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DEVIntegExportBulkSQL extends DEVIntegExportBulkBase
{
    int                     curCellPosition;
    str                     resRow;

    TextBuffer              textBuffer;
    str                     reportDelimeter;
    int                     currentRow;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exportData</Name>
				<Source><![CDATA[
    public void exportData()
    {
        this.initCSVStream();

        reportDelimeter = messageTypeTableOutbound.getFileColumnDelimiter();

        this.doExecuteQueryResult();
        ioDataStream.writeRaw(resRow);

        numberOfLines = currentRow;
        this.sendFileToStorage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportDescription</Name>
				<Source><![CDATA[
    public str getExportDescription()
    {
        return "Export SQL query to CSV";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultParameters</Name>
				<Source><![CDATA[
    public DEVIntegMessageTypeTableOutbound initDefaultParameters(DEVIntegMessageTypeTableOutbound    _messageTypeTableOutbound)
    {
        _messageTypeTableOutbound.SQLText     = 'SELECT * FROM CustGroup';
        _messageTypeTableOutbound.SQLMaxRows  = 1000;
        DEVIntegMessageTypeTableOutbound  res = super(_messageTypeTableOutbound);

        res.FileName             = 'ExportSQL_%d.csv';

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultSet</Name>
				<Source><![CDATA[
    private ResultSet getResultSet(str _strQuery)
    {
        Connection  connection = new Connection();
        Statement   statement = connection.createStatement();
        SqlStatementExecutePermission permission;
        ResultSet resultSet;
          
        
        permission = new SqlStatementExecutePermission(_strQuery);
        permission.assert();

        Map paramMap = SqlParams::create();
        resultSet = statement.executeQueryWithParameters(_strQuery, paramMap);

        return resultSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResultRow</Name>
				<Source><![CDATA[
    void  addResultRow(container _row, boolean _isHeader = false)
    {
        int i;

        for (i = 1; i <= conLen(_row); i++)
        {
            this.addRowCell(conPeek(_row, i));
        }
        this.addNewRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewRow</Name>
				<Source><![CDATA[
    void  addNewRow()
    {
        textBuffer.appendText('\n');
        curCellPosition = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRowCell</Name>
				<Source><![CDATA[
    void  addRowCell(str  _cellData)
    {
        curCellPosition++;
        if (curCellPosition > 1)
        {
            textBuffer.appendText(reportDelimeter);
        }
        textBuffer.appendText(_cellData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doExecuteQueryResult</Name>
				<Source><![CDATA[
    public void doExecuteQueryResult()
    {
        int         i;
        container   expectedSubResult;
        ResultSet   resultSet;
        ResultSetMetaData  resultSetMetaData;
        boolean     isFirstRow = true;
        int         maxColumnCount;
        
        ;
        textBuffer = new TextBuffer();

        resultSet = this.getResultSet(messageTypeTableOutbound.SQLText);
        resultSetMetaData = resultSet.getMetaData();
        currentRow = 0;

        while(resultSet.next())
        {
            if (messageTypeTableOutbound.SQLMaxRows && currentRow > messageTypeTableOutbound.SQLMaxRows)
            {
                warning(strFmt("Exceeding the allowed number of lines %1", messageTypeTableOutbound.SQLMaxRows));
                this.setExportStatus(DEVIntegExportBulkStatus::Warning);
                break;
            }
            currentRow++;
            //print row headers
            if (isFirstRow)
            {
                expectedSubResult = connull();
                for ( i = 1; i <= resultSetMetaData.getColumnCount(); i++)
                {
                    expectedSubResult += resultSetMetaData.getColumnName(i);
                }
                this.addResultRow(expectedSubResult, true);
                isFirstRow = false;

                maxColumnCount = resultSetMetaData.getColumnCount();
            }
            else
            {
                this.addNewRow();
            }
            str     sTmp;
            for ( i = 1; i <= maxColumnCount; i++)
            {
                sTmp = resultSet.getString(i);

                this.addRowCell(sTmp);
            }
        }
        resRow = textBuffer.getText();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>